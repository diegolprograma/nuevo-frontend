{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst TOKEN_KEY = 'AuthToken';\nconst USERNAME_KEY = 'AuthUsername';\nconst AUTHORITIES_KEY = 'AuthAuthorities';\nexport class TokenService {\n  constructor() {\n    this.roles = [];\n  }\n  setToken(token) {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n  getToken() {\n    return sessionStorage.getItem(TOKEN_KEY);\n  }\n  setUserName(userName) {\n    window.sessionStorage.removeItem(USERNAME_KEY);\n    window.sessionStorage.setItem(USERNAME_KEY, userName);\n  }\n  getUserName() {\n    return sessionStorage.getItem(USERNAME_KEY);\n  }\n  setAuthorities(authorities) {\n    window.sessionStorage.removeItem(AUTHORITIES_KEY);\n    window.sessionStorage.setItem(AUTHORITIES_KEY, JSON.stringify(authorities));\n  }\n  getAuthorities() {\n    this.roles = [];\n    if (sessionStorage.getItem(AUTHORITIES_KEY)) {\n      JSON.parse(sessionStorage.getItem(AUTHORITIES_KEY)).forEach(authority => {\n        this.roles.push(authority.authority);\n      });\n    }\n    return this.roles;\n  }\n  logOut() {\n    window.sessionStorage.clear();\n  }\n  static #_ = this.ɵfac = function TokenService_Factory(t) {\n    return new (t || TokenService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenService,\n    factory: TokenService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAGA,MAAMA,SAAS,GAAG,WAAW;AAC7B,MAAMC,YAAY,GAAG,cAAc;AACnC,MAAMC,eAAe,GAAG,iBAAiB;AAMzC,OAAM,MAAOC,YAAY;EAGvBC;IAFA,UAAK,GAAkB,EAAE;EAET;EAETC,QAAQ,CAACC,KAAa;IAC3BC,MAAM,CAACC,cAAc,CAACC,UAAU,CAACT,SAAS,CAAC;IAC3CO,MAAM,CAACC,cAAc,CAACE,OAAO,CAACV,SAAS,EAAEM,KAAK,CAAC;EACjD;EAEOK,QAAQ;IACd,OAAOH,cAAc,CAACI,OAAO,CAACZ,SAAS,CAAE;EAC1C;EAEOa,WAAW,CAACC,QAAgB;IACjCP,MAAM,CAACC,cAAc,CAACC,UAAU,CAACR,YAAY,CAAC;IAC9CM,MAAM,CAACC,cAAc,CAACE,OAAO,CAACT,YAAY,EAAEa,QAAQ,CAAC;EACvD;EAEOC,WAAW;IAChB,OAAOP,cAAc,CAACI,OAAO,CAACX,YAAY,CAAE;EAC7C;EAEOe,cAAc,CAACC,WAAqB;IAC1CV,MAAM,CAACC,cAAc,CAACC,UAAU,CAACP,eAAe,CAAC;IACjDK,MAAM,CAACC,cAAc,CAACE,OAAO,CAACR,eAAe,EAAEgB,IAAI,CAACC,SAAS,CAACF,WAAW,CAAC,CAAC;EAC5E;EAEOG,cAAc;IACpB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAGb,cAAc,CAACI,OAAO,CAACV,eAAe,CAAE,EAAC;MAC1CgB,IAAI,CAACI,KAAK,CAACd,cAAc,CAACI,OAAO,CAACV,eAAe,CAAE,CAAC,CAACqB,OAAO,CAAEC,SAAa,IAAI;QAC9E,IAAI,CAACH,KAAK,CAACI,IAAI,CAACD,SAAS,CAACA,SAAS,CAAC;MACrC,CAAC,CAAC;;IAEJ,OAAO,IAAI,CAACH,KAAK;EAClB;EAIOK,MAAM;IACZnB,MAAM,CAACC,cAAc,CAACmB,KAAK,EAAE;EAC9B;EAAC;qBA1CSxB,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAyB,SAAZzB,YAAY;IAAA0B,YAHX;EAAM","names":["TOKEN_KEY","USERNAME_KEY","AUTHORITIES_KEY","TokenService","constructor","setToken","token","window","sessionStorage","removeItem","setItem","getToken","getItem","setUserName","userName","getUserName","setAuthorities","authorities","JSON","stringify","getAuthorities","roles","parse","forEach","authority","push","logOut","clear","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbook/Documents/diego/Programacion/Visual Studio/nuevo proyecto/frontend/src/app/service/token.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n\nconst TOKEN_KEY = 'AuthToken';\nconst USERNAME_KEY = 'AuthUsername';\nconst AUTHORITIES_KEY = 'AuthAuthorities';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TokenService {\n  roles: Array<string> = [];\n\n  constructor() { }\n\n  public setToken(token: string): void {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public getToken():string {\n   return sessionStorage.getItem(TOKEN_KEY)!;\n  }\n\n  public setUserName(userName: string): void {\n    window.sessionStorage.removeItem(USERNAME_KEY);\n    window.sessionStorage.setItem(USERNAME_KEY, userName);\n  }\n\n  public getUserName():string {\n    return sessionStorage.getItem(USERNAME_KEY)!;\n   }\n\n   public setAuthorities(authorities: string[]): void {\n    window.sessionStorage.removeItem(AUTHORITIES_KEY);\n    window.sessionStorage.setItem(AUTHORITIES_KEY, JSON.stringify(authorities));\n   }\n\n   public getAuthorities(): string[]{\n    this.roles = [];\n    if(sessionStorage.getItem(AUTHORITIES_KEY)!){\n      JSON.parse(sessionStorage.getItem(AUTHORITIES_KEY)!).forEach((authority:any) => {\n       this.roles.push(authority.authority); \n      });\n    }\n    return this.roles;\n   }\n\n\n\n   public logOut(): void {\n    window.sessionStorage.clear()\n   }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}