{"ast":null,"code":"import { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token.service\";\nexport class InterceptorService {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n  }\n  InterceptorService(req, next) {\n    let intReq = req;\n    const token = this.tokenService.getToken();\n    if (token != null) {\n      intReq = req.clone({\n        headers: req.headers.set('Authorization', 'Bearer' + token)\n      });\n    }\n    return next.handle(intReq);\n  }\n  static #_ = this.ɵfac = function InterceptorService_Factory(t) {\n    return new (t || InterceptorService)(i0.ɵɵinject(i1.TokenService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InterceptorService,\n    factory: InterceptorService.ɵfac\n  });\n}\nexport const interceptorProvider = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: InterceptorService,\n  multi: true\n}];","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAA6C,sBAAsB;;;AAQ7F,OAAM,MAAOC,kBAAkB;EAC3BC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAgB;EAEhDF,kBAAkB,CAACG,GAAqB,EAAEC,IAAiB;IACvD,IAAIC,MAAM,GAAGF,GAAG;IAChB,MAAMG,KAAK,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE;IAC1C,IAAGD,KAAK,IAAI,IAAI,EAAC;MACbD,MAAM,GAAGF,GAAG,CAACK,KAAK,CAAC;QACfC,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAGJ,KAAK;OAC7D,CAAC;;IAEN,OAAOF,IAAI,CAACO,MAAM,CAACN,MAAM,CAAC;EAC9B;EAAC;qBAZQL,kBAAkB;EAAA;EAAA;WAAlBA,kBAAkB;IAAAY,SAAlBZ,kBAAkB;EAAA;;AAe/B,OAAO,MAAMa,mBAAmB,GAAG,CAAC;EAChCC,OAAO,EAAEf,iBAAiB;EAC1BgB,QAAQ,EAAEf,kBAAkB;EAC5BgB,KAAK,EAAE;CACV,CAAC","names":["HTTP_INTERCEPTORS","InterceptorService","constructor","tokenService","req","next","intReq","token","getToken","clone","headers","set","handle","factory","interceptorProvider","provide","useClass","multi"],"sourceRoot":"","sources":["/Users/macbook/Documents/diego/Programacion/Visual Studio/nuevo proyecto/frontend/src/app/service/interceptor-service.ts"],"sourcesContent":["import { HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { TokenService } from \"./token.service\";\nimport { Observable } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\n\n@Injectable({\n    \n})\nexport class InterceptorService {\n    constructor(private tokenService: TokenService){}\n    \n    InterceptorService(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>{\n        let intReq = req;\n        const token = this.tokenService.getToken();\n        if(token != null){\n            intReq = req.clone({\n                headers: req.headers.set('Authorization', 'Bearer' + token)\n            });\n        }\n        return next.handle(intReq);\n    }\n}\n\nexport const interceptorProvider = [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: InterceptorService,\n    multi: true\n}];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}